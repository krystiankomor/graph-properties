        -:    0:Source:/home/krystian/development/study/algorytmy/project1/DateConverter_lib/Julian.cpp
        -:    0:Graph:/home/krystian/development/study/algorytmy/project1/cmake-build-debug-coverage/DateConverter_lib/CMakeFiles/DateConverter_lib.dir/Julian.cpp.gcno
        -:    0:Data:/home/krystian/development/study/algorytmy/project1/cmake-build-debug-coverage/DateConverter_lib/CMakeFiles/DateConverter_lib.dir/Julian.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by krystian on 25.10.2021.
        -:    3://
        -:    4:
        -:    5:#include "Julian.h"
        -:    6:
function _ZN10JulianDate14CalcJulianDateEi called 12 returned 100% blocks executed 92%
       12:    7:void JulianDate::CalcJulianDate(int date) {
        -:    8:
       12:    9:    if (!date) {
       12:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####:   10:        year = month = day = 0;
    %%%%%:   10-block  0
        -:   11:    }
        -:   12:    else {
       12:   13:        year = ((date+JULIAN_EPOCH)/YEAR_MAX_LENGTH);
       12:   13-block  0
       36:   14:        while (date>=getAbsoluteDate(1, 1, year+1))
       36:   14-block  0
call    0 returned 36
branch  1 taken 24 (fallthrough)
branch  2 taken 12
       24:   15:            year++;
       24:   15-block  0
       24:   16:        while (date>getAbsoluteDate(month, LastMonthDay(month, year), year))
       24:   16-block  0
call    0 returned 24
call    1 returned 24
branch  2 taken 12 (fallthrough)
branch  3 taken 12
       12:   17:            month++;
       12:   17-block  0
       12:   18:        int JulDay = getAbsoluteDate(month, 1, year);
       12:   18-block  0
call    0 returned 12
       12:   19:        day = date-JulDay+1;
        -:   20:    }
       12:   21:}
        -:   22:
function _ZN10JulianDate15getAbsoluteDateEiii called 72 returned 100% blocks executed 100%
       72:   23:int JulianDate::getAbsoluteDate(int m, int d, int y) {
       72:   24:    int N = d;                         // days this month
       99:   25:    for (int mm = m - 1;  mm > 0; mm--) // days in prior months this year
       72:   25-block  0
       99:   25-block  1
branch  0 taken 27 (fallthrough)
branch  1 taken 72
       27:   26:        N = N + LastMonthDay(mm, y);
       27:   26-block  0
call    0 returned 27
        -:   27:    return
        -:   28:            (N                     // days this year
       72:   29:             + 365 * (y - 1)    // days in previous years ignoring leap days
       72:   30:             + (y - 1)/4        // leap days before this year...
       72:   31:             + JULIAN_EPOCH);       // days elapsed before absolute date 1
       72:   31-block  0
        -:   32:}
        -:   33:
function _ZN10JulianDate12LastMonthDayEii called 51 returned 100% blocks executed 71%
       51:   34:int JulianDate::LastMonthDay(int m, int y)
        -:   35:{
       51:   36:    switch (m) {
       51:   36-block  0
branch  0 taken 15
branch  1 taken 0
branch  2 taken 36
       15:   37:        case 2:
       15:   38:            if ((y % 4) == 0)
       15:   38-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 0
       15:   39:                return 29;
       15:   39-block  0
        -:   40:            else
    #####:   41:                return 28;
    %%%%%:   41-block  0
    #####:   42:        case 4:
        -:   43:        case 6:
        -:   44:        case 9:
    #####:   45:        case 11: return 30;
    %%%%%:   45-block  0
       36:   46:        default:
       36:   47:            return MAX_MONTH_LENGTH;
       36:   47-block  0
        -:   48:    }
        -:   49:}
